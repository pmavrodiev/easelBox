// Generated by CoffeeScript 1.3.3
(function() {

  window.GhostsAndMonstersGame = (function() {
    var PIXELS_PER_METER, forceMultiplier, frameRate, gravityX, gravityY;

    PIXELS_PER_METER = 20;

    gravityX = 0;

    gravityY = 10;

    frameRate = 40;

    forceMultiplier = 7;

    GhostsAndMonstersGame.prototype.reset = function() {
      return alert(window.innerWidth);
    };

    function GhostsAndMonstersGame(canvas, debugCanvas, statsCanvas) {
      var ground, groundLevelPixels, initHeadXPixels, motionRadiusPixels, worldHeightPixels, worldWidthPixels,
        _this = this;
      this.world = new EaselBoxWorld(this, frameRate, canvas, debugCanvas, gravityX, gravityY, PIXELS_PER_METER);
      this.stats = new Stats();
      statsCanvas.appendChild(this.stats.domElement);
      worldWidthPixels = canvas.width;
      worldHeightPixels = canvas.height;
      initHeadXPixels = 140;
      groundLevelPixels = worldHeightPixels - (37 / 2);
      this.world.addImage("/img/sky.jpg", {
        scaleX: 1.3,
        scaleY: 1.7
      });
      this.world.addImage("/img/trees.png", {
        scaleX: 0.5,
        scaleY: 0.9,
        y: worldHeightPixels - 700 * 0.55
      });
      this.world.addImage("/img/mountains.png", {
        scaleX: 1,
        scaleY: 1,
        y: worldHeightPixels - 254 * 1
      });
      this.world.addImage("/img/catapult_50x150.png", {
        x: initHeadXPixels - 10,
        y: worldHeightPixels - 160
      });
      ground = this.world.addEntity({
        widthPixels: 1540,
        heightPixels: 37,
        imgSrc: '/img/ground-cropped.png',
        type: 'static',
        xPixels: 0,
        yPixels: groundLevelPixels
      });
      this.head = this.world.addEntity({
        radiusPixels: 20,
        imgSrc: '/img/mz.png',
        type: 'static',
        xPixels: initHeadXPixels,
        yPixels: groundLevelPixels - 140
      }, motionRadiusPixels = 40);
      this.head.selected = false;
      this.head.easelObj.onPress = function(eventPress) {
        _this.head.selected = true;
        _this.head.initPositionXpixels = initHeadXPixels;
        _this.head.initPositionYpixels = groundLevelPixels - 140;
        eventPress.onMouseMove = function(event) {
          if (Math.pow(event.stageX - _this.head.initPositionXpixels, 2) + Math.pow(event.stageY - _this.head.initPositionYpixels, 2) <= Math.pow(motionRadiusPixels, 2)) {
            return _this.head.setState({
              xPixels: event.stageX,
              yPixels: event.stageY
            });
          }
        };
        return eventPress.onMouseUp = function(event) {
          var forceX, forceY, sgn, theta;
          _this.head.selected = false;
          _this.head.setType("dynamic");
          sgn = function(x) {
            if (x > 0) {
              return 1;
            } else if (x < 0) {
              return -1;
            } else {
              return 0;
            }
          };
          alert("x origin " + _this.head.initPositionXpixels);
          alert("y origin " + _this.head.initPositionYpixels);
          alert("x event " + event.stageX);
          alert("y event " + event.stageY);
          if (Math.pow(event.stageX - _this.head.initPositionXpixels, 2) + Math.pow(event.stageY - _this.head.initPositionYpixels, 2) > Math.pow(motionRadiusPixels, 2)) {
            theta = Math.atan(event.stageY / event.stageX);
            alert("angle " + 360 / theta);
            event.stageX = (Math.cos(theta) * motionRadiusPixels + _this.head.initPositionXpixels) * sgn(event.stageX);
            event.stageY = (Math.sin(theta) * motionRadiusPixels + _this.head.initPositionYpixels) * sgn(event.stageY);
          }
          alert("x event post " + event.stageX);
          alert("y event post " + event.stageY);
          forceX = (_this.head.initPositionXpixels - event.stageX) * forceMultiplier;
          forceY = (_this.head.initPositionYpixels - event.stageY) * forceMultiplier;
          return _this.head.body.ApplyImpulse(_this.world.vector(forceX, forceY), _this.world.vector(_this.head.body.GetPosition().x, _this.head.body.GetPosition().y));
        };
      };
      this.drawPyramid(groundLevelPixels);
    }

    GhostsAndMonstersGame.prototype.drawPyramid = function(groundLevelPixels) {
      var blockHeight, blockWidth, ghost, i, j, leftPyamid, levels, myBlock, topOfPyramid, x, y, _i, _results;
      blockWidth = 15;
      blockHeight = 60;
      leftPyamid = 500;
      levels = 4;
      topOfPyramid = groundLevelPixels - levels * (blockHeight + blockWidth) + 26;
      _results = [];
      for (i = _i = 0; 0 <= levels ? _i < levels : _i > levels; i = 0 <= levels ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref, _results1;
          _results1 = [];
          for (j = _j = 0, _ref = i + 1; 0 <= _ref ? _j <= _ref : _j >= _ref; j = 0 <= _ref ? ++_j : --_j) {
            x = leftPyamid + (j - i / 2) * blockHeight;
            y = topOfPyramid + i * (blockHeight + blockWidth);
            myBlock = this.world.addEntity({
              widthPixels: blockWidth,
              heightPixels: blockHeight,
              imgSrc: '/img/block1_15x60.png',
              xPixels: x,
              yPixels: y
            });
            if (j <= i) {
              myBlock = this.world.addEntity({
                widthPixels: blockWidth,
                heightPixels: blockHeight,
                imgSrc: '/img/block1_15x60.png',
                xPixels: x + blockHeight / 2,
                yPixels: y - (blockHeight + blockWidth) / 2,
                angleDegrees: 90
              });
              _results1.push(ghost = this.world.addEntity({
                widthPixels: 30,
                heightPixels: 36,
                imgSrc: '/img/enemy.png',
                xPixels: x + (blockHeight / 2),
                yPixels: y + 11
              }));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GhostsAndMonstersGame.prototype.tick = function() {
      return this.stats.update();
    };

    return GhostsAndMonstersGame;

  })();

}).call(this);
